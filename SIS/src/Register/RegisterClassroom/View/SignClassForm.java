/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Register.RegisterClassroom.View;

import Classroom.Control.ClassroomController;
import Classroom.Model.Classroom;
import Course.Control.CourseController;
import Course.Model.Course;
import Register.RegisterClassroom.Control.SignClassController;
import Register.RegisterClassroom.Model.SignClassDetail;
import Register.RegisterCourse.Model.SignCourseDetail;
import Student.Model.Student;
import Student.View.MainPage;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author haidt
 */
public class SignClassForm extends javax.swing.JFrame {
    private final MainPage mainPageInstance;
    private final Student student;
    /**
     * Creates new form SignClassForm
     * @param mainPage
     * @param student
     */
    public SignClassForm(MainPage mainPage,Student student) {
        initComponents();
        this.mainPageInstance=mainPage;
        this.student=student;
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        this.initialization();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelHeader = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jLabelFormName = new javax.swing.JLabel();
        jPanelContent = new javax.swing.JPanel();
        jLabelTerm = new javax.swing.JLabel();
        jComboBoxTerm = new javax.swing.JComboBox<>();
        jLabelInputClassCode = new javax.swing.JLabel();
        jTextFieldInputClassCode = new javax.swing.JTextField();
        jButtonAddClass = new javax.swing.JButton();
        jScrollPaneTableSignClass = new javax.swing.JScrollPane();
        jTableSignClass = new javax.swing.JTable();
        jScrollPaneTableSchedule = new javax.swing.JScrollPane();
        jTableSchedule = new javax.swing.JTable();
        jButtonSendRequest = new javax.swing.JButton();
        jLabelAlert = new javax.swing.JLabel();
        jLabelContentCredit = new javax.swing.JLabel();
        jLabelSumCredit = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanelHeader.setBackground(new java.awt.Color(0, 51, 255));

        jLabelTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelTitle.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTitle.setText("Đăng ký học tập");

        jLabelFormName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelFormName.setForeground(new java.awt.Color(255, 255, 255));
        jLabelFormName.setText("Đăng ký học phần");

        javax.swing.GroupLayout jPanelHeaderLayout = new javax.swing.GroupLayout(jPanelHeader);
        jPanelHeader.setLayout(jPanelHeaderLayout);
        jPanelHeaderLayout.setHorizontalGroup(
            jPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelFormName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelHeaderLayout.setVerticalGroup(
            jPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelFormName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabelTerm.setText("Kỳ học");

        jComboBoxTerm.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxTermItemStateChanged(evt);
            }
        });

        jLabelInputClassCode.setText("Nhập mã lớp học");

        jButtonAddClass.setText("Thêm lớp học");
        jButtonAddClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonAddClassMouseClicked(evt);
            }
        });

        jTableSignClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã học phần", "Mã lớp học", "Tên học phần", "Kiểu lớp", "Trạng thái đăng ký", "Xóa đăng ký", "Số tín chỉ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPaneTableSignClass.setViewportView(jTableSignClass);

        jTableSchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã học phần", "Thứ", "Giờ", "Địa điểm", "Kiểu lớp"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPaneTableSchedule.setViewportView(jTableSchedule);

        jButtonSendRequest.setText("Đăng ký lớp học");
        jButtonSendRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSendRequestMouseClicked(evt);
            }
        });

        jLabelAlert.setForeground(new java.awt.Color(255, 0, 0));

        jLabelContentCredit.setText("Tổng số tín chỉ: ");

        jLabelSumCredit.setText("0");

        javax.swing.GroupLayout jPanelContentLayout = new javax.swing.GroupLayout(jPanelContent);
        jPanelContent.setLayout(jPanelContentLayout);
        jPanelContentLayout.setHorizontalGroup(
            jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelContentLayout.createSequentialGroup()
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelContentLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTableSignClass, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
                            .addGroup(jPanelContentLayout.createSequentialGroup()
                                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanelContentLayout.createSequentialGroup()
                                        .addComponent(jLabelInputClassCode, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldInputClassCode, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonAddClass, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanelContentLayout.createSequentialGroup()
                                        .addComponent(jLabelTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabelAlert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanelContentLayout.createSequentialGroup()
                        .addGap(292, 292, 292)
                        .addComponent(jButtonSendRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelContentLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabelContentCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelSumCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelContentLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPaneTableSchedule)))
                .addContainerGap())
        );
        jPanelContentLayout.setVerticalGroup(
            jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelTerm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxTerm, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(jLabelAlert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonAddClass, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jLabelInputClassCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldInputClassCode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneTableSignClass, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelSumCredit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelContentCredit, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSendRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPaneTableSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.mainPageInstance.setEnabled(true);
        this.mainPageInstance.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void jButtonAddClassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddClassMouseClicked
        // TODO add your handling code here:
        SignClassController signClassController= new SignClassController();
        ClassroomController classroomController= new ClassroomController();                
        String classId=jTextFieldInputClassCode.getText().toUpperCase();
        if("".equals(classId)){           
            JOptionPane.showMessageDialog(this,"Bạn cần nhập mã lớp học");
        }
        else if (signClassController.checkSignClassCondition()){
            List<SignCourseDetail> listSignCourse= signClassController.getSignSucessCourseList(jComboBoxTerm.getSelectedItem().toString(),student.getStudentID());
            Classroom signClass= classroomController.getClassroomById(classId);
            if(listSignCourse==null){
                JOptionPane.showMessageDialog(this,"Bạn chưa đăng ký học phần đợi đợt đăng ký bổ sung");                
            }
            else if(signClass==null){
                JOptionPane.showMessageDialog(this,"Không tồn tại mã lớp");
            }
            else{
                Course signCourse= new CourseController().getCourseById(signClass.getCourseId());
                switch(signClassController.checkSignCondition(listSignCourse, signClass, signCourse,Integer.parseInt(jLabelSumCredit.getText()))){
                    case 0:{
                        JOptionPane.showMessageDialog(this,"Bạn chưa đăng ký học phần môn này");
                        break;
                    }
                    case 1:{
                        for(int i=0;i<jTableSignClass.getRowCount();i++){
                            if(signClass.getClassId().equals(jTableSignClass.getValueAt(i,0).toString())){
                                JOptionPane.showMessageDialog(this,"Bạn đã thêm lớp này");
                                return;
                            }
                        }  
                        DefaultTableModel model = (DefaultTableModel) jTableSignClass.getModel();
                        Object row[] = new Object[7];
                        row[0]= signClass.getCourseId();
                        row[1]= signClass.getClassId();
                        row[2]= signClass.getCourseName();
                        row[3]= signClass.getClassType();
                        row[4]= "Đã thêm";
                        row[5]= false;
                        row[6]= signCourse.getCredit();
                        model.addRow(row);
                        if(signClass.getClassType().equals("LT+BT"))
                            jLabelSumCredit.setText(String.valueOf(Integer.parseInt(jLabelSumCredit.getText())+ signCourse.getCredit()));
                        break;
                    }
                    case 2:{
                        JOptionPane.showMessageDialog(this,"Bạn đã quá số tín chỉ");
                        break;
                    } 
                }
            }
        }
        else{
            jLabelAlert.setText("Chưa đến thời gian đăng ký lớp");
            jButtonAddClass.setVisible(false);
            jButtonSendRequest.setVisible(false);
        }
    }//GEN-LAST:event_jButtonAddClassMouseClicked

    private void jButtonSendRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSendRequestMouseClicked
        // TODO add your handling code here:
        int countRowTable=jTableSignClass.getRowCount();
        if(countRowTable==0){
            JOptionPane.showMessageDialog(this,"Bạn chưa thêm học phần nào");
        }
        else if(!checkChangeRequestSignClass()){
            JOptionPane.showMessageDialog(this,"Yêu cầu đăng ký không có thay đổi");
        }
        else{
            String[] listCourseId= new String[countRowTable];
            for(int i=0;i<countRowTable;i++){
                listCourseId[i]=jTableSignClass.getValueAt(i,0).toString();
            }
            SignClassController signClassController= new SignClassController();
            CourseController courseController= new CourseController();
            List<Course> listSignCourse=courseController.getListCourseByListCourseId(listCourseId);
            if(checkClassTypeCondition(listSignCourse, countRowTable)){
                String studentId=student.getStudentID();
                String term=jComboBoxTerm.getSelectedItem().toString();
                List<SignClassDetail> listAddSignClass= new ArrayList<>();
                List<SignClassDetail> listDeleteSignClass= new ArrayList<>();
                for(int i=0;i<countRowTable;i++){
                    SignClassDetail sCD= new SignClassDetail();
                    sCD.setClassID(jTableSignClass.getValueAt(i,1).toString());
                    sCD.setStudentID(studentId);
                    sCD.setTerm(term);
                    sCD.setTimeSign(new Date());
                    if(!(boolean)jTableSignClass.getValueAt(i,5)&&jTableSignClass.getValueAt(i,4).equals("Đã thêm"))
                        listAddSignClass.add(sCD);
                    else if((boolean)jTableSignClass.getValueAt(i,5))
                        listDeleteSignClass.add(sCD);
                }
                int feedback= signClassController.sendRequestSignClass(listAddSignClass, listDeleteSignClass);
                switch (feedback){
                    case 0:{
                        updateSignClassFormInfo();
                        this.alertSucessSignClass(listAddSignClass, listDeleteSignClass);
                        break;
                    }
                    default:{
                        this.alertFailSignClass();
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonSendRequestMouseClicked

    private void jComboBoxTermItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxTermItemStateChanged
        // TODO add your handling code here:
        if(new SignClassController().checkTermSignClass(jComboBoxTerm.getSelectedItem().toString())){
            jButtonAddClass.setVisible(true);
            jButtonSendRequest.setVisible(true);
            jLabelAlert.setText("");
        }
        else{
            jButtonAddClass.setVisible(false);
            jButtonSendRequest.setVisible(false);
            jLabelAlert.setText("Chưa đến thời gian đăng ký");
            ((DefaultTableModel)this.jTableSignClass.getModel()).setNumRows(0);
            ((DefaultTableModel)this.jTableSchedule.getModel()).setNumRows(0);
        }
        updateSignClassFormInfo();
    }//GEN-LAST:event_jComboBoxTermItemStateChanged
    public boolean checkMaxSignClass(Classroom classroom){
        return new SignClassController().checkMaxSignClass(classId);
    }
    public void alertSucessSignClass(List<SignClassDetail> listAddSignClass,List<SignClassDetail> listDeleteSignClass){
        for(SignClassDetail sCD: listAddSignClass){
            for(int i=0;i<jTableSignClass.getRowCount();i++){
                if(sCD.getClassID().equals(jTableSignClass.getValueAt(i,1).toString()))
                    jTableSignClass.setValueAt("Thành công", i, 4);
            }
        }
        for(SignClassDetail sCD: listDeleteSignClass){
            for(int i=0;i<jTableSignClass.getRowCount();i++){
                if(sCD.getClassID().equals(jTableSignClass.getValueAt(i,1).toString()))
                    ((DefaultTableModel)this.jTableSignClass.getModel()).removeRow(i);
            }
        }
        JOptionPane.showMessageDialog(this,"Yêu cầu được gửi thành công");
    }
    public void alertFailSignClass(){
        JOptionPane.showMessageDialog(this,"Đã xảy ra lỗi khi gửi yêu cầu");
    }
    public boolean checkChangeRequestSignClass(){
        for (int i=0;i<jTableSignClass.getRowCount();i++){
            if((!"Thành công".equals(jTableSignClass.getValueAt(i,4).toString()))||((boolean)jTableSignClass.getValueAt(i,5)==true))
                return true;
        }
        return false;
    }
    public boolean checkClassTypeCondition(List<Course> listSignCourse,int countRowTable){
        int checkAll=0;
        String notification="";
        for(Course c: listSignCourse){
            if(c.getCourseType().equals("LT+BT,TH")){
                int checkEach=0;
                for(int i=0;i<countRowTable;i++){
                    if((jTableSignClass.getValueAt(i,3).equals("LT+BT")||jTableSignClass.getValueAt(i,3).equals("TH"))&&jTableSignClass.getValueAt(i,0).equals(c.getCourseID())&&jTableSignClass.getValueAt(i,5).equals(false)){
                        checkEach+=1;
                        checkAll+=1;
                    }
                    if(checkEach!=2){
                        notification+=c.getCourseID();
                    }
                }                
            }
        }
        if(checkAll%2==0){
            return true;
        }
        else{
            JOptionPane.showMessageDialog(this,"Học phần "+notification+" còn thiếu lớp thực hành hoặc lý thuyết-bài tập");
            return false;
        }
    }
    public void updateSignClassFormInfo(){
        int sumCredit=0;
        DefaultTableModel modelSignClass = (DefaultTableModel) jTableSignClass.getModel();
        modelSignClass.setRowCount(0);
        DefaultTableModel modelSchedule = (DefaultTableModel) jTableSchedule.getModel();
        modelSchedule.setRowCount(0);
        jTableSchedule.setAutoCreateRowSorter(true);
        SignClassController sinClassController= new SignClassController();
        List<SignClassDetail> listSCD= sinClassController.getListSignClassRoomByStudentIdInTerm(student.getStudentID(),jComboBoxTerm.getSelectedItem().toString());
        if(listSCD!=null){
        for(SignClassDetail sCD: listSCD){
            Classroom signClassroom=new ClassroomController().getClassroomById(sCD.getClassID());
            Course signCourse= new CourseController().getCourseById(signClassroom.getCourseId());
            Object row[] = new Object[7];
            row[0]= signCourse.getCourseID();
            row[1]= sCD.getClassID();
            row[2]= signCourse.getCourseName();
            row[3]= signClassroom.getCourseName();
            row[4]="Thành công";
            row[5]= false;
            row[6]= signCourse.getCredit();
            modelSignClass.addRow(row);
            String[] classTime=signClassroom.getTime().split("-");
            for (String classTime1 : classTime) {
                String[] time = classTime1.split("\\|");
                Object row2[]= new Object[5];
                row2[0]=signCourse.getCourseID();
                row2[1]="Thứ "+time[0];
                row2[2]=time[1]+"-"+time[2];
                row2[3]=signClassroom.getPlace();
                row2[4]=signClassroom.getClassType();
                modelSchedule.addRow(row2);
            }            
            if(!signClassroom.getClassType().equals("TH"))
                sumCredit+=signCourse.getCredit();
        }
        sortScheduleTable(modelSchedule);
        jLabelSumCredit.setText(String.valueOf(sumCredit));
        }
    }
    public void initialization(){   
        int dateStart=student.getDateStart().getYear()+1900;
        for(int i=0;i<10;i++){
            jComboBoxTerm.addItem(String.valueOf(dateStart+String.valueOf(i%2+1)));
            if(i%2==1)
                dateStart+=1;
        }
        if(new SignClassController().checkTermSignClass(jComboBoxTerm.getSelectedItem().toString())){
            jButtonAddClass.setVisible(true);
            jButtonSendRequest.setVisible(true);
            jLabelAlert.setText("");
        }
        else{
            jButtonAddClass.setVisible(false);
            jButtonSendRequest.setVisible(false);
            jLabelAlert.setText("Chưa đến thời gian đăng ký");
            ((DefaultTableModel)this.jTableSignClass.getModel()).setNumRows(0);
            ((DefaultTableModel)this.jTableSchedule.getModel()).setNumRows(0);
        }
        updateSignClassFormInfo();
    }
    public void sortScheduleTable(DefaultTableModel modelSchedule){
        Vector data = modelSchedule.getDataVector();
        Object[] colData = new Object[modelSchedule.getRowCount()];
        for (int i = 0; i < colData.length; i++) {                            
                colData[i]= ((Vector) data.get(i)).get(1).toString()+"-"+((Vector) data.get(i)).get(2).toString();
        }
        Arrays.sort(colData,new ColumnSorter() );
        for (int i = 0; i < colData.length; i++) {
          ((Vector) data.get(i)).set(1,((String)colData[i]).substring(0,5));
        }
        modelSchedule.fireTableStructureChanged();
    }
    class ColumnSorter implements Comparator {
        ColumnSorter() {
        }
        @Override
        public int compare(Object a, Object b) {
            if (a == null && b == null) {
              return 0;
            } else if (a == null) {
              return 1;
            } else if (b == null) {
              return -1;
            }         
            else {
                String[] a1=a.toString().split("-");
                String[] a2=b.toString().split("-");
                if(a1[0].compareTo(a2[0])!=0)
                    return a1[0].compareTo(a2[0]);
                else{
                    return a1[1].compareTo(a2[1]);
                }
            }
          }
        }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddClass;
    private javax.swing.JButton jButtonSendRequest;
    private javax.swing.JComboBox<String> jComboBoxTerm;
    private javax.swing.JLabel jLabelAlert;
    private javax.swing.JLabel jLabelContentCredit;
    private javax.swing.JLabel jLabelFormName;
    private javax.swing.JLabel jLabelInputClassCode;
    private javax.swing.JLabel jLabelSumCredit;
    private javax.swing.JLabel jLabelTerm;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanelContent;
    private javax.swing.JPanel jPanelHeader;
    private javax.swing.JScrollPane jScrollPaneTableSchedule;
    private javax.swing.JScrollPane jScrollPaneTableSignClass;
    private javax.swing.JTable jTableSchedule;
    private javax.swing.JTable jTableSignClass;
    private javax.swing.JTextField jTextFieldInputClassCode;
    // End of variables declaration//GEN-END:variables
}
